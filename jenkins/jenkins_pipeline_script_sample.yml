pipeline {
    agent any
    environment {
        PYTHON_ENV = 'venv'
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build')  // Add parameter for branch selection
    }
    stages {
        stage('Check & Setup Allure') {                 // Check if Allure is installed
            steps {
                sh '''
                    if ! which allure > /dev/null 2>&1; then
                        echo "Allure not found. Installing Allure..."
                        mkdir -p /usr/local/bin/allure
                        curl -sLo allure.zip https://github.com/allure-framework/allure2/releases/download/2.33.0/allure-2.33.0.zip
                        unzip -q allure.zip -d /usr/local/bin/allure
                        rm allure.zip
                        ln -s /usr/local/bin/allure/allure /usr/local/bin/allure
                        echo "Allure installed successfully."
                    else
                        echo "Allure is already installed."
                    fi
                '''
            }
        }
        stage('Pulling from GitHub') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/harifrahman/selenium-sauce-demo.git'  // Use the branch parameter
            }
        }
        stage('Setup Python Environment') {
            steps {                                         // Checks if the venv directory exists. | create new if doesnt exists | activate venv
                sh '''
                    if [ ! -d "${PYTHON_ENV}" ]; then       
                        python3 -m venv ${PYTHON_ENV}       
                    fi
                    . ${PYTHON_ENV}/bin/activate            
                '''
            }
        }
        stage('Install Dependencies') {
            steps {                                                         // install and Caches the downloaded dependencies locally to speed up future installations.
                sh '''
                    . ${PYTHON_ENV}/bin/activate
                    pip install -r requirements.txt --cache-dir=.pip-cache      
                '''
            }
        }
        stage('Run Tests') {
            timeout(time: 30, unit: 'MINUTES') {  // Set a timeout for the stage
                steps {
                    retry(2) {  // Retry the test stage up to 2 times
                        sh '''
                            . ${PYTHON_ENV}/bin/activate
                            pytest tests --alluredir=allure-results || true
                        '''
                    }
                }
            }
        }
    }
    post {                                      // post block typically contains actions that are executed after the pipeline stage
        always {
            sh '''
                . ${PYTHON_ENV}/bin/activate
                export PATH=$PATH:/usr/local/bin
                allure generate allure-results -o allure-report --clean || true
            '''
            publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'allure-report',
                reportFiles: 'index.html',
                reportName: 'Allure Report'
            ])
        }
    }
}